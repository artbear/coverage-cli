pipeline {

    agent { 
        // Используйте свою метку для ноды. 
        // На ноде должны быть установлены EDT и сканер для SonarQube
        label 'edt' 
    }
    
    environment {    
        // Project specific
        DebuggerURL   = 'http://localhost:1550'
        InfobaseName  = 'coverage_test'
        ClusterName   = 'localhost'
        SourcesPath   = 'src/cf'
        SourcesFormat = 'XML'
        VBParams      = 'VBParams.json'

        // Jenkins specific
        sonarTool     = 'SonarQubeTool'
        sonarInstance = 'SonarQubeServer'

        // Different strokes for different folks
        CoverageTemp = '.coverage'
    }

    stages {

        stage('Подготовка рабочей области') {
            steps {
                dir(CoverageTemp) { deleteDir() }
                writeFile file: "${CoverageTemp}/dummy", text: 'dummy'
            }
        }

        stage('Запуск сбора покрытия') {
            environment {
                commandArgs = [
                        "--infobase ${InfobaseName}",
                        "--debugger ${DebuggerURL}",
                        "--output ${CoverageTemp}/coverage.csv"
                    ].join(' ')
            }
            
            steps {
                coverage_cli("start", commandArgs)
            }

            post {
                success {
                    sleep time: 15, unit: 'SECONDS'
                }
            }
        }

        stage('Тестирование проекта') {
            environment {
                commandArgs = [
                        "--ibconnection ${ibconnection()}",
                        "--vanessasettings ${VBParams}",
                        "--additional \"/DEBUG -http -attach /DEBUGGERURL ${DebuggerURL}\""
                    ].join(' ')
            }

            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    vrunner('vanessa', commandArgs)
                }
            }
        }

        stage('Остановка сбора покрытия') {
            steps {
                coverage_cli("stop", "")
            }
        }

        stage('Разбор результатов покрытия') {
            environment {
                commandArgs = [
                        "--input ${CoverageTemp}/coverage.csv",
                        "--output ${CoverageTemp}/coveredLines.xml",
                        "--sources ${SourcesPath}",
                        "--format ${SourcesFormat}"
                    ].join(' ')   
            }

            steps {
                coverage_cli("convert", commandArgs)
            }
        }
        
        stage('Получение строк для покрытия') {
            
            environment {
                commandArgs = [  
                        "--sources ${SourcesPath}",
                        "--output ${CoverageTemp}/linesToCover.xml"    
                    ].join(' ')   
            }  

            steps {
                coverage_cli("lines", commandArgs)
            }
        }

        stage ('Запуск проверки SQ') {
            environment {
                scannerHome = tool sonarTool
                SONAR_SCANNER_OPTS = [
                        '-XX:+UseG1GC',
                        '-XX:MaxGCPauseMillis=200',
                        '-Dfile.encoding=UTF-8'
                    ].join(' ')

                coverageReportPaths = [
                    "${CoverageTemp}/coveredLines.xml",
                    "${CoverageTemp}/linesToCover.xml"
                ].join(',')
                
                commandArgs = [  
                        "-Dsonar.coverageReportPaths=${coverageReportPaths}"
                    ].join(' ')     
            }

            steps {
                withSonarQubeEnv(installationName: sonarInstance) {
                    sonar_scanner(scannerHome, commandArgs)
                }
            }    
        }
    }
}

def ibconnection() {
    "/S${ClusterName}/${InfobaseName}"
}

def coverage_cli(command, commandArgs) {
    echo "coverage-cli ${command} ${commandArgs}"
    bat "@chcp 65001 >nul\n@coverage-cli ${command} ${commandArgs}"
}

def sonar_scanner(scannerHome, commandArgs) {
    echo "sonar-scanner.bat ${commandArgs}"
    bat "@chcp 65001 >nul\n@\"${scannerHome}/bin/sonar-scanner.bat\" ${commandArgs}"   
}

def vrunner(command, commandArgs) {
    echo "vrunner ${command} ${commandArgs}"
    bat "@chcp 65001 >nul\n@vrunner ${command} ${commandArgs}"
}
