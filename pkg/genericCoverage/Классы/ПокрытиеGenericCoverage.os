#Использовать asserts
#Использовать fs

Перем ДанныеПокрытия;

#Область ПрограммныйИнтерфейс

Процедура УстановитьПокрытиеСтроки(ИмяФайла, НомерСтроки, ЕстьПокрытие) Экспорт
	
	Утверждения.ПроверитьРавенство(ТипЗнч(ИмяФайла), Тип("Строка"),
		"Имя файла должно быть строкой");
	
	Утверждения.ПроверитьРавенство(ТипЗнч(НомерСтроки), Тип("Число"),
		"Номер строки должен быть числом");
	
	Утверждения.ПроверитьЗаполненность(НомерСтроки,
		"Номер строки должен быть указан");
	
	Утверждения.ПроверитьРавенство(ТипЗнч(ЕстьПокрытие), Тип("Булево"),
		"Наличие покрытия должно быть булево");
	
	ДанныеПокрытияФайла = ДанныеПокрытия.Получить(ИмяФайла);
	
	Если ДанныеПокрытияФайла = Неопределено Тогда
		ДанныеПокрытияФайла = Новый Соответствие;
		ДанныеПокрытия.Вставить(ИмяФайла, ДанныеПокрытияФайла);
	КонецЕсли;
	
	УстановитьПокрытиеСтрокиВнутренний(ДанныеПокрытияФайла, НомерСтроки, ЕстьПокрытие);
	
КонецПроцедуры

Процедура УстановитьПокрытиеСтрок(ИмяФайла, ПокрытиеСтрок) Экспорт
	
	Утверждения.ПроверитьРавенство(ТипЗнч(ИмяФайла), Тип("Строка"),
		"Имя файла должно быть строкой");
	
	ДанныеПокрытияФайла = ДанныеПокрытия.Получить(ИмяФайла);
	
	Если ДанныеПокрытияФайла = Неопределено Тогда
		ДанныеПокрытияФайла = Новый Соответствие;
		ДанныеПокрытия.Вставить(ИмяФайла, ДанныеПокрытияФайла);
	КонецЕсли;
	
	Для Каждого ПокрытиеСтроки Из ПокрытиеСтрок Цикл
		
		НомерСтроки = ПокрытиеСтроки.НомерСтроки;
		ЕстьПокрытие = ПокрытиеСтроки.ЕстьПокрытие;
		
		Утверждения.ПроверитьРавенство(ТипЗнч(НомерСтроки), Тип("Число"),
			"Номер строки должен быть числом");
		
		Утверждения.ПроверитьЗаполненность(НомерСтроки,
			"Номер строки должен быть указан");
		
		Утверждения.ПроверитьРавенство(ТипЗнч(ЕстьПокрытие), Тип("Булево"),
			"Наличие покрытия должно быть булево");
		
		УстановитьПокрытиеСтрокиВнутренний(ДанныеПокрытияФайла,
			ПокрытиеСтроки.НомерСтроки, ПокрытиеСтроки.ЕстьПокрытие);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПрограммныеМодули() Экспорт
	
	ПокрытыеМодули = Новый Массив;
	Для Каждого ДанныеПокрытияФайла Из ДанныеПокрытия Цикл
		ПокрытыеМодули.Добавить(ДанныеПокрытияФайла.Ключ);
	КонецЦикла;
	
	Возврат ПокрытыеМодули;
	
КонецФункции

Функция СтрокиПрограммныхМодулей(ИмяФайла) Экспорт
	
	Утверждения.ПроверитьРавенство(ТипЗнч(ИмяФайла), Тип("Строка"),
		"Имя файла должно быть строкой");
	
	Результат = Новый Массив;
	
	ДанныеПокрытияФайла = ДанныеПокрытия.Получить(ИмяФайла);
	Если ДанныеПокрытия = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ПокрытиеСтроки1 Из ДанныеПокрытияФайла Цикл
		
		ПокрытиеСтроки = НовоеПокрытиеСтроки();
		ПокрытиеСтроки.НомерСтроки = ПокрытиеСтроки1.Ключ;
		ПокрытиеСтроки.ЕстьПокрытие = ПокрытиеСтроки1.Значение;
		Результат.Добавить(ПокрытиеСтроки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура Прочитать(ФайлGenericCoverage) Экспорт
	
	Утверждения.ПроверитьРавенство(ТипЗнч(ФайлGenericCoverage), Тип("Строка"),
		"Имя файла должно быть строкой");
	
	Утверждения.ПроверитьИстину(ФС.ФайлСуществует(ФайлGenericCoverage),
		"Файл должен существовать");
	
	ДанныеПокрытия = Новый Соответствие;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлGenericCoverage);
	ЧтениеXML.ПерейтиКСодержимому();
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	Пока ЧтениеXML.Прочитать() И ЧтениеXML.ЛокальноеИмя = "file" Цикл
		
		SourcePath = ЧтениеXML.ПолучитьАтрибут("path");
		
		ДанныеПокрытияФайла = Новый Соответствие;
		ДанныеПокрытия.Вставить(SourcePath, ДанныеПокрытияФайла);
		
		Пока ЧтениеXML.Прочитать() И ЧтениеXML.ЛокальноеИмя = "lineToCover" Цикл
			
			lineNumber = ОписаниеТипаЧисло.ПривестиЗначение(ЧтениеXML.ПолучитьАтрибут("lineNumber"));
			covered = ОписаниеТипаБулево.ПривестиЗначение(ЧтениеXML.ПолучитьАтрибут("covered"));
			
			УстановитьПокрытиеСтрокиВнутренний(ДанныеПокрытияФайла, lineNumber, covered);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

Процедура Записать(ФайлGenericCoverage) Экспорт
	
	Утверждения.ПроверитьРавенство(ТипЗнч(ФайлGenericCoverage), Тип("Строка"),
		"Имя файла должно быть строкой");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ФайлGenericCoverage);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("coverage");
	ЗаписьXML.ЗаписатьАтрибут("version", "1");
	
	Для каждого ДанныеПокрытияФайла Из ДанныеПокрытия Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("file");
		ЗаписьXML.ЗаписатьАтрибут("path", ДанныеПокрытияФайла.Ключ);
		
		Для Каждого ПокрытиеСтроки Из ДанныеПокрытияФайла.Значение Цикл
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("lineToCover");
			ЗаписьXML.ЗаписатьАтрибут("lineNumber", XMLСтрока(ПокрытиеСтроки.Ключ));
			ЗаписьXML.ЗаписатьАтрибут("covered", XMLСтрока(ПокрытиеСтроки.Значение));
			ЗаписьXML.ЗаписатьКонецЭлемента(); // lineToCover
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // file
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // coverage
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриСозданииОбъекта() Экспорт
	ДанныеПокрытия = Новый Соответствие;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьПокрытиеСтрокиВнутренний(ДанныеПокрытияФайла, НомерСтроки, ЕстьПокрытие)
	
	ЕстьПокрытиеСтроки = ДанныеПокрытияФайла.Получить(НомерСтроки);
	Если ЕстьПокрытиеСтроки = Неопределено ИЛИ (ЕстьПокрытиеСтроки = Ложь И ЕстьПокрытие) Тогда
		ДанныеПокрытияФайла.Вставить(НомерСтроки, ЕстьПокрытие);
	КонецЕсли;
	
КонецПроцедуры

Функция НовоеПокрытиеСтроки()
	
	ПокрытиеСтроки = Новый Структура;
	ПокрытиеСтроки.Вставить("НомерСтроки", 0);
	ПокрытиеСтроки.Вставить("ЕстьПокрытие", Ложь);
	
	Возврат ПокрытиеСтроки;
	
КонецФункции

#КонецОбласти
